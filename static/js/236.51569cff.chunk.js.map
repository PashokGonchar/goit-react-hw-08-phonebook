{"version":3,"file":"static/js/236.51569cff.chunk.js","mappings":"8UASe,SAASA,IACtB,OAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,MARZC,EADF,EACEA,QACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MAHF,IAIEC,UAAaC,EAJf,EAIeA,OAAQC,EAJvB,EAIuBA,mBASvB,GAA4BC,EAAAA,EAAAA,UAAS,CACnCP,SAAU,GACVQ,cAAc,IAFhB,eAAOC,EAAP,KAAeC,EAAf,KAKMC,GAAWC,EAAAA,EAAAA,gBAEjBC,EAAAA,EAAAA,YAAU,WACJP,GACFH,GAEH,GAAE,CAACG,EAAoBH,IAExB,IAAMW,EAA0B,WAC9BJ,GAAU,kBACLD,GADI,IAEPD,cAAeC,EAAOD,eAEzB,EAEKO,EAA0B,SAAAC,GAC9BA,EAAEC,gBACH,EAUD,OACE,iCACE,UAAC,EAAAC,KAAD,CAAMC,SAAUjB,GAVC,SAAAkB,GACnBT,GAASU,EAAAA,EAAAA,UAASD,GACnB,IAEmB,SAAAE,GAClBC,EAAAA,GAAAA,MAAYD,EACb,IAIG,WACE,SAAC,KAAD,CACExB,KAAK,OACLG,QAASA,EACTuB,OAAQ,kBAAGC,EAAH,EAAGA,MAAH,OACN,SAACC,EAAA,GAAD,kBACMD,GADN,IAEEE,MAAM,WACNC,QAAQ,WACRC,KAAK,QACLP,MAAOjB,EAAOP,OAAQ,EACtBgC,WAAU,UAAEzB,EAAOP,YAAT,aAAE,EAAaiC,QACzBC,UAAQ,IARJ,KAaV,SAAC,KAAD,CACElC,KAAK,QACLG,QAASA,EACTuB,OAAQ,kBAAGC,EAAH,EAAGA,MAAH,OACN,SAACC,EAAA,GAAD,kBACMD,GADN,IAEEE,MAAM,QACNC,QAAQ,WACRC,KAAK,QACLP,MAAOjB,EAAON,QAAS,EACvB+B,WAAU,UAAEzB,EAAON,aAAT,aAAE,EAAcgC,QAC1BC,UAAQ,IARJ,KAaV,SAAC,KAAD,CACElC,KAAK,WACLG,QAASA,EACTuB,OAAQ,kBAAGC,EAAH,EAAGA,MAAH,OACN,SAACC,EAAA,GAAD,kBACMD,GADN,IAEEE,MAAM,WACNC,QAAQ,WACRC,KAAK,QACLP,MAAOjB,EAAOL,WAAY,EAC1B8B,WAAU,UAAEzB,EAAOL,gBAAT,aAAE,EAAiB+B,QAC7BE,KAAMxB,EAAOD,aAAe,OAAS,WACrCwB,UAAQ,EACRE,WAAY,CACVC,cACE,SAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACE,SAACC,EAAA,EAAD,CACE,aAAW,6BACXC,QAASzB,EACT0B,YAAazB,EAHf,SAKGN,EAAOD,cAAe,SAACiC,EAAA,EAAD,KAAoB,SAACC,EAAA,EAAD,WAlB/C,KA0BV,SAACC,EAAA,EAAD,CAAQV,KAAK,SAASL,QAAQ,WAA9B,SAAyC,cAK3C,SAAC,KAAD,CACES,SAAS,YACTO,UAAW,IACXC,iBAAiB,EACjBC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,EACZC,MAAM,cAIb,CCvIc,SAASC,IACpB,OAAO,SAACzD,EAAD,GACV,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { Button, IconButton, InputAdornment, TextField } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { Form } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { register } from 'redux/user/operations';\n\nexport default function RegisterForm() {\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors, isSubmitSuccessful },\n  } = useForm({\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n  });\n\n  const [values, setValues] = useState({\n    password: '',\n    showPassword: false,\n  });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      reset();\n    }\n  }, [isSubmitSuccessful, reset]);\n\n  const handleClickShowPassword = () => {\n    setValues({\n      ...values,\n      showPassword: !values.showPassword,\n    });\n  };\n\n  const handleMouseDownPassword = e => {\n    e.preventDefault();\n  };\n\n  const onFormSubmit = data => {\n    dispatch(register(data));\n  };\n\n  const onFormError = error => {\n    toast.error(error);\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit(onFormSubmit, onFormError)}>\n        <Controller\n          name=\"name\"\n          control={control}\n          render={({ field }) => (\n            <TextField\n              {...field}\n              label=\"Username\"\n              variant=\"outlined\"\n              size=\"small\"\n              error={errors.name && true}\n              helperText={errors.name?.message}\n              required\n            />\n          )}\n        />\n\n        <Controller\n          name=\"email\"\n          control={control}\n          render={({ field }) => (\n            <TextField\n              {...field}\n              label=\"Email\"\n              variant=\"outlined\"\n              size=\"small\"\n              error={errors.email && true}\n              helperText={errors.email?.message}\n              required\n            />\n          )}\n        />\n\n        <Controller\n          name=\"password\"\n          control={control}\n          render={({ field }) => (\n            <TextField\n              {...field}\n              label=\"Password\"\n              variant=\"outlined\"\n              size=\"small\"\n              error={errors.password && true}\n              helperText={errors.password?.message}\n              type={values.showPassword ? 'text' : 'password'}\n              required\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      onMouseDown={handleMouseDownPassword}\n                    >\n                      {values.showPassword ? <VisibilityOff /> : <Visibility />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          )}\n        />\n        <Button type=\"submit\" variant=\"outlined\">\n          Login\n        </Button>\n      </Form>\n\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"colored\"\n      />\n    </>\n  );\n}\n","import RegisterForm from \"components/RegisterForm/RegisterForm\";\n\nexport default function Register() {\n    return <RegisterForm/>\n}"],"names":["RegisterForm","useForm","defaultValues","name","email","password","control","handleSubmit","reset","formState","errors","isSubmitSuccessful","useState","showPassword","values","setValues","dispatch","useDispatch","useEffect","handleClickShowPassword","handleMouseDownPassword","e","preventDefault","Form","onSubmit","data","register","error","toast","render","field","TextField","label","variant","size","helperText","message","required","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","VisibilityOff","Visibility","Button","autoClose","hideProgressBar","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","Register"],"sourceRoot":""}